# -*- coding: utf-8 -*-
"""bitcoinSentimentAnalysisSincePandemic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DZVrmgMu4nNQH428-YbxZAgBqJDGz1wE
"""

#Bitcoin Sentiment Analysis
#This python project is focus on what people think about Bitcoin during the pandemic.
#I am going to perform basic data cleanning to remove irrelavent tweets, retweets, and any duplications, etc.
#and using TexBlob API to calculate the polarity scores in order to categorize each tweets on bitcoin

#Import the necessary libraries
import tweepy
from textblob import TextBlob
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
plt.style.use('ggplot')

#Upload the credentials
from google.colab import files
files.upload()

#Store the credentials
cred = pd.read_excel('twitterDEV.xlsx', header=None)
APIKey = cred[0][0]
APISecret = cred[0][1]
accessToken = cred[0][2]
accessTokenSecret = cred[0][3]

#Create the authentication object
authenticate = tweepy.OAuthHandler(APIKey, APISecret)
#Set the access token and the access token secret
authenticate.set_access_token(accessToken, accessTokenSecret)
#Create the API object
api = tweepy.API(authenticate, wait_on_rate_limit=True)

#Gather 2000 tweets about Bitcoin (filter out any retweets)
search_term = '#bitcoin -filter:retweets'
#Create the cursor object
tweets = tweepy.Cursor(api.search, q=search_term, lang='en', since='2020-03-01', tweet_mode = 'extended').items(2000)
#Store the tweets in a variable and get the full text
all_tweets = [tweet.full_text for tweet in tweets]

#Create a dataframe to store the tweets
df = pd.DataFrame(all_tweets, columns=['Tweets'])
df.head()

#Create a function to clean the tweets
def cleanTwt(twt):
  twt = re.sub('#bitcoin', 'bitcoin', twt) #Remove the hashtag
  twt = re.sub('#Bitcoin', 'bitcoin', twt) #lower the case
  twt = re.sub('#[A-Za-z0-9]+', '', twt) #Remove any strings with a "#"
  twt = re.sub('\\n', '', twt) #Remove the newline
  twt = re.sub('http?s:\/\/\S+', '', twt) #Remove any hyperlinks
  return twt

#Clean the tweets using the function created
df['CleanedTweets']= df['Tweets'].apply(cleanTwt)
df.head()

#Create a function to get the subjectivity
def getSubjectivity(twt):
  return TextBlob(twt).sentiment.subjectivity
#Create a function to get the polarity
def getPolarity(twt):
  return TextBlob(twt).sentiment.polarity


#Create 'Subjectivity' & 'Polarity' columns
df['Subjectivity'] = df['CleanedTweets'].apply(getSubjectivity)
df['Polarity'] = df['CleanedTweets'].apply(getPolarity)

#Show the data
df.head()

#Create a function to get the sentiment text
def getSentiment(score):
  if score <0:
    return 'Negative'
  elif score == 0:
    return 'Newtrual'
  else:
    return 'Positive'

#Create a column to store the text sentiment
df['Sentiment'] = df['Polarity'].apply(getSentiment)
#Show the data
df.head(10)

#Create a scatter plot to show the subjectivity and the polarity
plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='Purple')

plt.title('Sentiment Analysis Scatter Plot')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#Create a bar chart to show the count of Positive, Neutral, and Negaive sentiments
df['Sentiment'].value_counts().plot(kind='bar')
plt.title('Sentiment Analysis Bar Plot')
plt.xlabel('Sentiments')
plt.ylabel('NUmber of Tweets')
plt.show()

#Create a wordcloud to see what words people used the most on their tweets about bitcoin
text = " ".join(CleanedTweet for CleanedTweet in df['CleanedTweets'])
stopwords = set(STOPWORDS)
stopwords.update(['bitcoin', 'BTC'])
wordcloud = WordCloud(stopwords = stopwords, background_color = "white", width=1600, height=800).generate(text)
plt.figure(figsize=(20,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.show()
plt.savefig('wordcloud.png')